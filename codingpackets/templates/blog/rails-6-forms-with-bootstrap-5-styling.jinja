{% extends "_layouts/blog.jinja" %}

{% block page_content %}

<h3 id="intro">Intro</h3>
<p>
  Forms allow you to receive data from your users via the
  webapp and store that information in your database and/or
  send it off for external processing to something like an 
  API.
</p>
<p>
  In this post I will go over the process of using forms 
  in rails 6 and styling them with the Bootstrap 5 CSS 
  framework.
</p>
<p>
  for this exercise, lets pretend we have a
  {{ text::emphasize(text="Sites") }}
 application 
  that you might use to store information about branch 
  locations.
</p>
<ul>
  <li>Rails - 6.0.3.4</li>
  <li>Bootstrap - 5.0.0-beta1</li>
</ul>

<h3 id="routes">Routes</h3>
<p>
  In order for users to see the desired form and also 
  submit the data they enter you will need to have the 
  correct routes setup. 
</p>

<p>
  The easiest way to achieve this is by using the 
  {{ link::e(path="https://guides.rubyonrails.org/routing.html#resources-on-the-web", description="resources") }}

  routes.
  Defining the {{ text::emphasize(text="resources") }}
 
  routes will automatically create all the most common routes 
  that are used.
</p>
<p>
  Add {{ text::emphasize(text="resources") }}
 routes for the 
  desired component in the 
  {{ text::emphasize(text="config/routes.rb") }}
 file.
</p>
{{ text::code_block(
  header="file",
  language="ruby",
  code="# config/routes.rb 

Rails.application.routes.draw do
  resources 'sites'
end"
) }}

<p>
  You can verify which routes are available with the 
  {{ text::code(text="rails routes") }}
 command.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code="rails routes | grep site

# output 
    sites GET    /sites(.:format)          sites#index
          POST   /sites(.:format)          sites#create
 new_site GET    /sites/new(.:format)      sites#new
edit_site GET    /sites/:id/edit(.:format) sites#edit
     site GET    /sites/:id(.:format)      sites#show
          PATCH  /sites/:id(.:format)      sites#update
          PUT    /sites/:id(.:format)      sites#update
          DELETE /sites/:id(.:format)      sites#destroy"
) }}

<p>
  The highlighted routes that are pointing to the 
  {{ text::emphasize(text="sites#create") }}
 and 
  {{ text::emphasize(text="sites#new") }}
 controller
  actions are the most important routes for our current task.
</p>

<h3 id="controller">Controller</h3>
<p>
  In the {{ text::emphasize(text="sites_controller.rb") }}

  file add the {{ text::emphasize(text="new") }}
 and 
  {{ text::emphasize(text="create") }}
 methods.
</p>
<p>
  The {{ text::emphasize(text="new") }}
 method is what 
  is used to serve the {{ text::emphasize(text="@site") }}
 
  model instance to the web application 
  {{ text::emphasize(text="view") }}
.
</p>
<p>
  When the form is submitted the form fields are submitted as 
  a {{ text::emphasize(text="paramaters") }}
 hash to the 
  {{ text::emphasize(text="create") }}
 method.
</p>
<p>
  Before the record can be saved the received 
  {{ text::emphasize(text="paramaters") }}
 need to be 
  validated via a {{ text::emphasize(text="strong parameters") }}
 
  check. The {{ text::emphasize(text="site_params") }}
 
  private method is used for this purpose.
</p>
<p>
  This is a security measure to prevent users from submitting 
  fields that are not in your form and potentially overwritting/adding 
  data to a record that they should not have access to.
</p>
<p>
  In the {{ text::emphasize(text="site_params") }}
 method 
  you specifically define the fields that users are allowed to 
  add/edit.
</p>

{{ text::code_block(
  header="file",
  language="ruby",
  code='# app/controllers/sites_controller.rb 

class SitesController < ApplicationController 

  def new
    @site = Site.new
  end

  def create
    @site = Site.new(site_params)
    if @site.save
      redirect_to sites_path
    end
  end
  
  private
    def site_params
      params.require(:site).permit(:name, :code, :description)
    end
end'
) }}

<h3 id="view">View</h3>
<p>
  Now for the Juicy bit. Firstly create the 
  {{ text::emphasize(text="new.html.erb") }}
 view file in the 
  {{ text::emphasize(text="app/views/sites/") }}
 directory. This 
  file will be used to present our form to the users.
</p>

<p>
  Using the 
  {{ link::e(path="https://guides.rubyonrails.org/form_helpers.html#dealing-with-basic-forms", description="form_with") }}
 
  helper we can pass in the 
  {{ text::emphasize(text="@site") }}
 model instance and 
  define our form fields. Rails will automatically create the HTML markup for the 
  web app.
</p>


{{ text::code_block(
  header="file",
  language="erb",
  code='<%# app/views/sites/new.html.erb %>

<%= form_with(model: @site) do |f| %>

      <%= f.label :name %>
      <%= f.text_field :name %>

      <%= f.label :code %>
      <%= f.text_field :code %>

      <%= f.label :description %>
      <%= f.text_field :description %>

    <%= f.submit "Submit" %>

<% end %>'
) }}

<p>
  But the results are not very exciting .....
</p>

<h4>Bootstrap</h4>
<p>
  To spice the form up, lets sprinkle in some Bootstrap styling.
</p>
<p>
  Using some of the code from  
  {{ link::e(path="https://getbootstrap.com/docs/5.0/forms/form-control/#example", description="this") }}

  form example. Wrap the form fields in {{ text::emphasize(text="divs") }}
 and 
  apply the CSS classes to the field parameters.
</p>
<p>
  I also wrapped the entire form in a 
  {{ link::e(path="https://getbootstrap.com/docs/5.0/components/card/#body", description="card") }}

  to give it a nice looking outline.
</p>


{{ text::code_block(
  header="file",
  language="erb",
  code='<%# app/views/sites/new.html.erb %>

<%= form_with(model: @site) do |f| %>
&lt;div class="card"&gt;
  &lt;div class="card-body"&gt;

    &lt;div class="mb-3"&gt;
      <%= f.label :name, { class: "form-label"} %>
      <%= f.text_field :name, { class: "form-control", placeholder: "Site Name" } %>
    &lt;/div&gt;

    &lt;div class="mb-3"&gt;
      <%= f.label :code, { class: "form-label"} %>
      <%= f.text_field :code, { class: "form-control", placeholder: "Site Code" } %>
    &lt;/div&gt;

    &lt;div class="mb-3"&gt;
      <%= f.label :description, { class: "form-label"} %>
      <%= f.text_field :description, { class: "form-control", placeholder: "Description" } %>
    &lt;/div&gt;

    <%= f.submit "Submit", class: "btn btn-primary" %>

  &lt;/div&gt;
&lt;/div&gt;
<% end %>'
) }}

<p>
  Much better dont you think?
</p>

{{ text::note_block(text='
   There are ruby gems that you can use to create bootstrap 
   styled forms and write mostly erb code. I personally 
   like this method better as there is more freedom over 
   the layout.
')
}}

<h3 id="outro">Outro</h3>
<p>
  In this post we created a web form for our Rails 6 app and 
  styled it with Bootstrap 5. Don't be formless like Brue Lee, 
  get some forms in your life.
</p>
{% endblock page_content %}