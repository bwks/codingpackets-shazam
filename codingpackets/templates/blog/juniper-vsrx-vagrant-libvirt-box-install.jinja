{% extends "_layouts/blog.jinja" %}

{% block page_content %}
<h3 id="intro">Intro</h3>
<p>
  In this post I will install a Juniper vSRX for use with the {{ text::emphasize(text="vagrant-libvirt") }}

  provider. Prior to installing the vSRX there are some required steps to get the KVM host
  prepped which I will not cover. These steps are covered in the Juniper
  documentation <a href="https://www.juniper.net/documentation/en_US/vsrx/topics/task/installation/security-vsrx-kvm-server-prep.html">
  here</a>.
</p>

{{ text::note_block(text='
    I originally covered this topic in December 2017. I have learned alot of lessons since then
    and there have been some nice additions to Vagrant to make things a bit more seamless.
    This post is a revamp of that previous post.
') }}

<p>
  For reference the following software will be used in this post.
</p>
<ul>
  <li><b>Juniper vSRX</b> - 18.1R1.9</li>
  <li><b>Vagrant</b> - Vagrant 2.1.0</li>
  <li><b>vagrant-libvirt</b> - 0.0.43</li>
  <li><b>Ubuntu</b> - 1604</li>
</ul>

<h3 id="download">Download</h3>
<p>
  Juniper does not provide a Vagrant Libvirt box, but they do provide a
  {{ text::emphasize(text="qcow2") }}
 image. You will
  need to download the {{ text::emphasize(text="qcow2") }}
 from the Juniper software
  {{ link::e(path="https://www.juniper.net/support/downloads/?p=vsrx#sw", description="download") }} section.
</p>

{{ text::important_block(text='
    You will need either a valid support contract or rights to download this image. Prior to
    working in my current role I was able to raise a case with Juniper support requesting
    access to the vSRX image for the purpose of preparing for my new role.
') }}

<h3 id="install">Install</h3>
<p>
  Create and change into directory for vSRX files. I like to keep my custom vagrant boxes under
  {{ text::emphasize(text="~/vagrant/boxes/") }}
.
</p>

{{ text::code_block(
  header="cmd",
  language="text",
  code=`mkdir -p ~/vagrant/boxes/juniper
cd ~/vagrant/boxes/juniper`
) }}


<p>
  Copy the qcow2 file downloaded earlier to the
  {{ text::emphasize(text="~/vagrant/boxes/juniper") }}
 directory.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`cp ~/Downloads/media-vsrx-vmdisk-15.1X49-D120.3.qcow2 .`
) }}


<p>
  The maintainers of the {{ text::emphasize(text="vagrant-libvirt") }}
 plugin have
  a script that can be used to convert {{ text::emphasize(text="qcow2") }}
 images to
  a vagrant box. Download the libvirt conversion script.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`curl -O https://raw.githubusercontent.com/vagrant-libvirt/vagrant-libvirt/master/tools/create_box.sh`
) }}


<p>
  Create a bootstrap configuration file named {{ text::emphasize(text="juniper.conf") }}

  with following contents that will be applied on boot to the vSRX.
</p>
{{ text::code_block(
  header="file",
  language="text",
  code=`system {
    host-name vsrx;
    root-authentication {
        encrypted-password "$1$nq.N1UsY$JxA/ESAj3KuXseXE597gg0"; ## SECRET-DATA
        ssh-rsa "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key"; ## SECRET-DATA
    }
    login {
        user vagrant {
            uid 2000;
            class super-user;
            authentication {
                ssh-rsa "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key"; ## SECRET-DATA
            }
        }
    }
    services {
        ssh {
            root-login allow;
        }
        netconf {
            ssh;
        }
    }
    syslog {
        user * {
            any emergency;
        }
        file messages {
            any any;
            authorization info;
        }
        file interactive-commands {
            interactive-commands any;
        }
    }
    license {
        autoupdate {
            url https://ae1.juniper.net/junos/key_retrieval;
        }
    }
}
interfaces {
    fxp0 {
        unit 0 {
            family inet {
                dhcp;
            }
        }
    }
}
security {
    forwarding-options {
        family {
            inet6 {
                mode packet-based;
            }
            mpls {
                mode packet-based;
            }
        }
    }
}`
) }}


{{ text::note_block(text='
    I am creating this VM in packet-mode. This essentially makes the vSRX a router. To use the vSRX as
    a firewall omit the $1 stanza.
') 
| replace(from="$1", to=text::emphasize(text="security > forwarding-options"))
}}

<p>
  Place the {{ text::emphasize(text="juniper.conf") }}
 file in a directory named
  {{ text::emphasize(text="iso_dir") }}
.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`ls -l iso_dir
# output


total 4
-rw-rw-r-- 1 bradmin bradmin 2050 Nov 29 23:13 juniper.conf`
) }}


<p>
  Create an iso image named {{ text::emphasize(text="bootstrap.iso") }}
.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`mkisofs -l -o bootstrap.iso iso_dir

# output

I: -input-charset not specified, using utf-8 (detected in locale settings)
Total translation table size: 0
Total rockridge attributes bytes: 0
Total directory bytes: 0
Path table size(bytes): 10
Max brk space used 0
176 extents written (0 MB)`
) }}


<p>
  Now lets build the vSRX VM.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`virt-install \
    --name vsrx \
    --os-type linux \
    --os-variant rhel7 \
    --cpu host \
    --vcpus=2 \
    --hvm \
    --arch=x86_64 \
    --ram 4096 \
    --disk path=junos-media-vsrx-x86-64-vmdisk-18.1R1.9.qcow2,size=16,device=disk,bus=ide,format=qcow2 \
    --disk path=bootstrap.iso,device=cdrom,bus=ide \
    --boot hd \
    --network=network:vagrant-libvirt,model=virtio \
    --graphics none \
    --import`
) }}


<p>
  A virtual console will be connected to the VM and you will be able to see the VM boot up.
  Once the VM is booted login with the username {{ text::emphasize(text="root") }}
 and
  password {{ text::emphasize(text="Juniper") }}
 and check the IP address assigned to
  the {{ text::emphasize(text="fxp0.0") }}
 interface.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`vsrx (ttyd0)

login: root
Password:

--- JUNOS 18.1R1.9 Kernel 64-bit  JNPR-11.0-20180308.0604c57_buil
root@vsrx%
root@vsrx% cli
root@vsrx> show interfaces terse | match fxp0.0

# output

fxp0.0                  up    up   inet     192.168.121.99/24`
) }}


<p>
  From another host terminal confirm that it is possible to SSH to the VM with the
  Vagrant {{ text::emphasize(text="insecure_private_key") }}
.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`# from host shell

ssh vagrant@192.168.121.99 -i ~/.vagrant.d/insecure_private_key

# now logged into guest vsrx

--- JUNOS 18.1R1.9 Kernel 64-bit  JNPR-11.0-20180308.0604c57_buil
vagrant@vsrx>`
) }}


<p>
  If you can successfully SSH to the vSRX with the Vagrant
  {{ text::emphasize(text="insecure_private_key") }}

  its time to package the VM into a Vagrant box. First shutdown the VM.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`request system power-off

# output

Power Off the system ? [yes,no] (no) yes


*** FINAL System shutdown message from vagrant@vsrx ***

System going down IMMEDIATELY`
) }}


{% include "_includes/libvirt-console-exit.jinja" %}

<p>
  Create a {{ text::emphasize(text="metadata.json") }}
 file with the following contents.
</p>
{{ text::code_block(
  header="file",
  language="json",
  code=`{"provider":"libvirt","format":"qcow2","virtual_size":16}`
) }}


<p>
  Use the previously downloaded {{ text::emphasize(text="create_box.sh") }}
 script to
  make a Vagrant box from the {{ text::emphasize(text="qcow2") }}
 image.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`bash create_box.sh junos-media-vsrx-x86-64-vmdisk-18.1R1.9.qcow2

# output

{16}
==> Creating box, tarring and gzipping
./metadata.json
./Vagrantfile
./box.img
Total bytes written: 4768798720 (4.5GiB, 24MiB/s)
==> junos-media-vsrx-x86-64-vmdisk-18.1R1.9.box created
==> You can now add the box:
==>   'vagrant box add junos-media-vsrx-x86-64-vmdisk-18.1R1.9.box --name junos-media-vsrx-x86-64-vmdisk-18.1R1.9'`
) }}


<p>
  Create a metadata file called {{ text::emphasize(text="vsrx.json") }}
 so that the
  box is added with the correct version number.
</p>
{{ text::code_block(
  header="file",
  language="json",
  code=`{
  "name": "juniper/vsrx",
  "description": "Juniper vSRX",
  "versions": [
    {
      "version": "18.1R1.9-packetmode",
      "providers": [
        {
          "name": "libvirt",
          "url": "file:///home/bradmin/vagrant/boxes/juniper/junos-media-vsrx-x86-64-vmdisk-18.1R1.9.box"
        }
      ]
    }
  ]
}`
) }}


<p>
  Add the box to Vagrant using the {{ text::emphasize(text="vsrx.json") }}
 file.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`vagrant box add vsrx.json

# output

==> box: Loading metadata for box 'vsrx.json'
    box: URL: file:///home/bradmin/vagrant/boxes/juniper/vsrx.json
==> box: Adding box 'juniper/vsrx' (v18.1R1.9-packetmode) for provider: libvirt
    box: Unpacking necessary files from: file:///home/bradmin/vagrant/boxes/juniper/junos-media-vsrx-x86-64-vmdisk-18.1R1.9.box
==> box: Successfully added box 'juniper/vsrx' (v18.1R1.9-packetmode) for 'libvirt'!`
) }}


<p>
  Confirm the vsrx box was added successfully.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`vagrant box list

# output

CumulusCommunity/cumulus-vx   (libvirt, 3.6.0)
.
. &lt;snip&gt;
.
juniper/vsrx                  (libvirt, 12.1X47-D15.4-packetmode)
juniper/vsrx                  (libvirt, 12.1X47-D15.4)
<span class="hljs-string">juniper/vsrx                  (libvirt, 18.1R1.9-packetmode)</span>`
) }}


<h3 id="vagrantfile">Vagrantfile</h3>
<p>
  Use this {{ text::emphasize(text="Vagrantfile") }}
 to test out the new vSRX Vagrant box.
</p>
{{ text::code_block(
  header="file",
  language="ruby",
  code=`# -*- mode: ruby -*-
# vi: set ft=ruby :

cwd = Dir.pwd.split("/").last

Vagrant.configure("2") do |config|

  config.vm.define "rt01" do |node|
    hostname = "rt01"
    node.vm.box = "juniper/vsrx"
    node.vm.box_version = "18.1R1.9-packetmode"
    node.vm.synced_folder ".", "/vagrant", id: "vagrant-root", disabled: true

    node.ssh.insert_key = false

    # Limit CPU once Box has finished booting.
    node.trigger.after :up do |trigger|
      trigger.name = "Finished Message"
      trigger.info = "Machine is up! : #{cwd}_#{hostname}"
      trigger.run = {inline: "virsh schedinfo #{cwd}_#{hostname} --set vcpu_quota=33000"}
    end

    node.vm.provider :libvirt do |domain|
      domain.nic_adapter_count = 1
      domain.disk_bus = "ide"
      domain.cpus = 2
      domain.memory = 4096
    end

  end
end`
) }}



{{ text::note_block(text='
    You may get 100% CPU on the host machine, the only way I could get this down without
    drastically affecting the box performance was to reduce the CPU scheduler access to 33%
    using the $1
 command. I am using a new feature in Vagrant 2.1.0
    called $2 to execute
    the required command automatically once the box has booted up.
') 
  | replace(from="$1", to=text::code(text="virsh schedinfo"))
  | replace(from="$2", to=link::e(path="https://www.vagrantup.com/docs/triggers/index.html", description="triggers"))
}}

<h3 id="testing">Testing</h3>
<p>
  Lets {{ text::code(text="vagrant up") }}
 and make sure we can connect to the vSRX.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`vagrant up

# output

Bringing machine 'rt01' up with 'libvirt' provider...
==> rt01: Checking if box 'juniper/vsrx' is up to date...
==> rt01: Uploading base box image as volume into libvirt storage...
==> rt01: Creating image (snapshot of base box volume).
==> rt01: Creating domain with the following settings...
==> rt01:  -- Name:              vsrx_rt01
==> rt01:  -- Domain type:       kvm
==> rt01:  -- Cpus:              2
==> rt01:
==> rt01:  -- Feature:           acpi
==> rt01:  -- Feature:           apic
==> rt01:  -- Feature:           pae
==> rt01:  -- Memory:            4096M
==> rt01:  -- Management MAC:
==> rt01:  -- Loader:
==> rt01:  -- Base box:          juniper/vsrx
==> rt01:  -- Storage pool:      disk1
==> rt01:  -- Image:             /var/lib/libvirt/images/vsrx_rt01.img (16G)
==> rt01:  -- Volume Cache:      default
==> rt01:  -- Kernel:
==> rt01:  -- Initrd:
==> rt01:  -- Graphics Type:     vnc
==> rt01:  -- Graphics Port:     -1
==> rt01:  -- Graphics IP:       127.0.0.1
==> rt01:  -- Graphics Password: Not defined
==> rt01:  -- Video Type:        cirrus
==> rt01:  -- Video VRAM:        9216
==> rt01:  -- Sound Type:
==> rt01:  -- Keymap:            en-us
==> rt01:  -- TPM Path:
==> rt01:  -- INPUT:             type=mouse, bus=ps2
==> rt01: Creating shared folders metadata...
==> rt01: Starting domain.
==> rt01: Waiting for domain to get an IP address...
==> rt01: Waiting for SSH to become available...
==> rt01: Configuring and enabling network interfaces...
    rt01: SSH address: 192.168.121.175:22
    rt01: SSH username: vagrant
    rt01: SSH auth method: private key
==> rt01: Running triggers after up ...
==> rt01: Running trigger: Finished Message...
==> rt01: Machine is up! : vsrx_rt01
    rt01: Running local: Inline script
    rt01: virsh schedinfo vsrx_rt01 --set vcpu_quota=33000
    rt01: Scheduler      : posix
    rt01: cpu_shares     : 1024
    rt01: vcpu_period    : 100000
    rt01: vcpu_quota     : 33000
    rt01: emulator_period: 100000
    rt01: emulator_quota : -1`
) }}


<p>
  Now SSH into vSRX.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`# from host shell

vagrant ssh

# now in vSRX shell

Last login: Sat May 12 04:39:58 2018
--- JUNOS 18.1R1.9 Kernel 64-bit  JNPR-11.0-20180308.0604c57_buil
vagrant@vsrx> show version
Hostname: vsrx
Model: vsrx
Junos: 18.1R1.9`
) }}


<p>
  Now that we are able to connect now lets clean up the box.
</p>

{{ text::code_block(
  header="cmd",
  language="text",
  code=`# from host shell

vagrant destroy -f

# output

==> rt01: Removing domain...`
) }}


<p>Remove the original KVM image.</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`rm -f junos-media-vsrx-x86-64-vmdisk-18.1R1.9.qcow2
virsh undefine vsrx

# output

Domain vsrx has been undefined`
) }}



<h3 id="outro">Outro</h3>
<p>
  The vSRX is a staple platform in the Juniper product line. If you made it this far you
  will have a modern Juniper vSRX Vagrant box configured for use with the
  {{ text::emphasize(text="vagrant-libvirt") }}
 provider. Now it's time to go out
  and build some Juniper labs.
</p>

{% endblock page_content %}