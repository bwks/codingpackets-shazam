{% extends "_layouts/blog.jinja" %}code_block
{% block page_content %}

<h3 id="intro">Intro</h3>
<p>
  I recently migrated my blog to AWS, since it was mostly static content I did not see much
  point in maintaining at VM and a tech stack just to to host static content. It was overkill.
  There are a lot of options for hosting a static site these days but since I am currently
  learning AWS so it makes sense to host it there.
</p>
<p>
  In this post I will go over the process I used to build out the required services and outline some of
  the gotcha I hit on the way.
</p>

<h3 id="aws-services">AWS Services</h3>
<p>
  AWS has a bajillion services and growing every year. They also have a number of
  {{ link::e(path="https://aws.amazon.com/websites/", description="options") }} available for hosting a
  website. I am using the the following services to host my website;
</p>
<ul>
  <li><b>Route 53</b> - DNS registration and management.</li>
  <li><b>Certificate Manager</b> - Create free TLS certificates for use with AWS services.</li>
  <li><b>S3</b> - An object store for static files.</li>
  <li><b>Cloud Front</b> - A globally distributed content delivery network (CDN).</li>
</ul>

<h4>Domain Name</h4>
<p>
  Firstly some background. I was initially hosting the DNS for
  {{ link::e(path="{{ links.rootPath.url }}", description="codingpackets.com") }} with Godaddy.
  I was pretty happy with them but there was an issue with
  redirects and I was getting a certificate error when using a bare domain IE:
  <i>https://codingpackets.com</i> without the {{ text::emphasize(text="www") }}
  .
  IE: <i>https://www.codingpackets.com</i>. This is related to the way S3 works as a website host
  adding {{ text::emphasize(text="www") }}
   to the domain
  and Godaddy's inability to create a DNS alias record. For this reason I transferred the
  {{ link::e(path="{{ links.rootPath.url }}", description="codingpackets.com") }} domain to Route 53.
</p>

<p>
  Before you move onto the next steps it's best to have your domain registered and active with
  Route 53. There are cheaper alternatives out there, but you don't get the ease of integration that
  you have with all your eggs in the AWS walled garden. The rest of this post assumes you have
  your domain registered and ready to go.
</p>

{{ text::note_block(text='
    This post does not cover registering or transferring a domain to AWS. For instructions
    to register a domain see $1
    and to transfer a domain see $2.'
  | replace(from="$1", to=link::e(path="https://aws.amazon.com/getting-started/hands-on/get-a-domain/", description="here"))
  | replace(from="$2", to=link::e(path="https://aws.amazon.com/premiumsupport/knowledge-center/transfer-domain-to-aws/", description="here"))
)
}}


<h3 id="s3">S3</h3>
<h4>Create and S3 Bucket</h4>
<p>
  An S3 bucket will be used to store the sites content IE: HTML, CSS, JS and image files.
  To create a bucket navigate to:
</p>

{{ text::breadcrumbs(items=[
  "Services",
  "S3",
  "Create bucket",
]) }}

<p>
  Enter the {{ text::emphasize(text="Bucket name") }}
  , untick the
  {{ text::emphasize(text="Block <i>all</i> public access") }}
   checkbox
  and tick the {{ text::emphasize(text="acknowledge") }}
   warning.
  Then click on {{ text::emphasize(text="Create bucket") }}
   button.
</p>
{{ image::boxed(path="blog/aws-s3-cloudfront-static-website-hosting/create-bucket-1.png", width="600px") }}

<h4>Apply Bucket Policy</h4>
<p>
  Next up apply permission to the bucket with a bucket policy. Navigate to:
</p>

{{ text::breadcrumbs(items=[
  "Services",
  "S3",
  "&lt;bucket-name&gt;",
  "Permissions",
  "Bucket Policy",
]) }}

<p>
  The bucket needs to be publicly accessible since people could be coming to your site from
  anywhere on the internet. Paste in the following code snippet replacing the
  {{ text::emphasize(text="ARN") }}
   with the {{ text::emphasize(text="ARN") }}
  
  for your bucket.
</p>

{{ text::code_block(
  header="cmd",
  language="json",
  code='{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "PublicReadGetObject",
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::&lt;bucket-arn&gt;/*"
        }
    ]
}'
) }}

{{ text::note_block(text='
    The $1
     can be found above the the code
    block next to the words $2
    in the AWS console.'
    | replace(from="$1", to=text::emphasize(text="ARN"))
    | replace(from="$2", to=text::emphasize(text="Bucket policy editor"))
)
}}

<h4>Enable Static Website Hosting</h4>
<p>
  Now enable the bucket to act as static website host by navigating to:
</p>

{{ text::breadcrumbs(items=[
  "Services",
  "S3",
  "&lt;bucket-name&gt;",
  "Properties",
  "Static website hosting",
]) }}

<p>
  Select the {{ text::emphasize(text="Use this bucket as a website") }}
   button and
  enter the name of the {{ text::emphasize(text="Index document") }}
   and
  {{ text::emphasize(text="Error document") }}
   then click the
  {{ text::emphasize(text="save") }}
   button.
</p>
{{ image::boxed(path="blog/aws-s3-cloudfront-static-website-hosting/create-bucket-2.png", width="400px") }}

{{ text::important_block(text='
    Take note of the $1
     without the $2 (highlighted above). This will be
    needed for your CloudFront distribution.'
    | replace(from="$1", to=text::emphasize(text="Endpoint"))
    | replace(from="$2", to=text::emphasize(text="http://"))
    )
}}

<h4>Upload Content to S3 Bucket</h4>
<p>
  Assuming you have generated your static site already you can upload the content to S3.
  I use the {{ text::code(text="aws S3 sync") }} from the AWS
  {{ link::e(path="https://aws.amazon.com/cli/", description="CLI") }} tool. My static files are stored in the
  {{ text::emphasize(text="_site") }}
   directory.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code='aws s3 sync _site/ s3://&lt;bucket-name&gt;'
) }}

<p>
  You can now navigate to the HTTP endpoint from the previous step to verify that your
  content is accessible.
</p>

<h3 id="certificate-manager">Certificate Manager</h3>
<h4>Request a Certificate</h4>
<p>
  Now lets generate a TLS certificate so that our site can be accessed securely over
  {{ text::emphasize(text="HTTPS") }}
  . Navigate to:
</p>

{{ text::breadcrumbs(items=[
  "Services",
  "Certificate Manager",
  "Request a certificate",
]) }}

<p>
  Select the {{ text::emphasize(text="Request a public certificate") }}
   radio button
  and press the {{ text::emphasize(text="Request a certificate") }}
   button.
</p>

{{ image::boxed(path="blog/aws-s3-cloudfront-static-website-hosting/request-a-certificate-1.png", width="800px") }}

<p>
  On the next screen enter the domain names you wish to have a certificate generated for.
  Enter both the {{ text::emphasize(text="bare") }}
   domain and the domain with the
  {{ text::emphasize(text="www") }}
   and press the
  {{ text::emphasize(text="Next") }}
   button.
</p>

{{ image::boxed(path="blog/aws-s3-cloudfront-static-website-hosting/request-a-certificate-2.png", width="800px") }}

<p>
  Select the {{ text::emphasize(text="DNS validation") }}
   radio button and press the
  {{ text::emphasize(text="Next") }}
   button.
</p>

{{ image::boxed(path="blog/aws-s3-cloudfront-static-website-hosting/request-a-certificate-3.png", width="800px") }}

<p>
  Enter tags if you wish and press the {{ text::emphasize(text="Review") }}
   button.
</p>

{{ image::boxed(path="blog/aws-s3-cloudfront-static-website-hosting/request-a-certificate-4.png", width="800px") }}

<p>
  Review everything is as you expect and then press the
  {{ text::emphasize(text="Confirm and request") }}
   button.
</p>

{{ image::boxed(path="blog/aws-s3-cloudfront-static-website-hosting/request-a-certificate-5.png", width="800px") }}

<p>
  For each domain press the {{ text::emphasize(text="Create record in Route 53") }}
   button.
  This will create a CNAME record that is used to confirm that you are the owner of the
  domain you are generating certificates for.
</p>

{{ image::boxed(path="blog/aws-s3-cloudfront-static-website-hosting/request-a-certificate-6.png", width="800px") }}

<p>
  Once DNS has propagated the {{ text::emphasize(text="Validation status") }}
   will
  change to {{ text::emphasize(text="Success") }}
  .
</p>

{{ image::boxed(path="blog/aws-s3-cloudfront-static-website-hosting/request-a-certificate-7.png", width="800px") }}

<h3 id="cloud-front">Cloud Front</h3>
<p>
  CloudFront is the AWS global CDN. CloudFront caches content at edge locations close you your users
  allowing them to access your content faster. Also CloudFront must be used if you want to enable
  HTTPs with a custom DNS name (Not the AWS S3 URL) for your S3 hosted website.
</p>
<h4>Create a Distribution</h4>
<p>
  To create a Cloud Front distribution navigate to:
</p>

{{ text::breadcrumbs(items=[
  "Services",
  "CloudFront",
  "Web",
  "Get Started",
]) }}

{{ text::note_block(text='
  This is a pretty big form and the next series of screen shots are from
  scrolling down on the form page.
')
}}

<h5>Origin Settings</h5>
{{ text::important_block(text="
  In the $1 paste in the $2
   from the previous step when
  converting your S3 bucket to a website host. If you don't do this and
  select the S3 bucket from the dropdown you will get permission errors
  when trying to access the site."
  | replace(from="$1", to=text::emphasize(text='Origin Domain Name'))
  | replace(from="$2", to=text::emphasize(text='Endpoint'))
  )
}}
<h5>Default Cache Behaviour Settings</h5>
<p>
  Select the {{ text::emphasize(text="Redirect HTTP to HTTPS") }}
  and the {{ text::emphasize(text="GET, HEAD") }}
   radio buttons.
</p>
{{ image::boxed(path="blog/aws-s3-cloudfront-static-website-hosting/create-distribution-1.png", width="600px") }}
<h5>Distribution Settings</h5>
<p>
  Enter the domain names you requested certificates for
  in the {{ text::emphasize(text="Alternate Domain Names") }}
  text box.
</p>
<p>
  Select the {{ text::emphasize(text="Custom SSL Certificate") }}
   radio
  button and select the previously created certificate from Certificate
  Manager.
</p>
{{ image::boxed(path="blog/aws-s3-cloudfront-static-website-hosting/create-distribution-2.png", width="800px") }}
<p>
  Select the {{ text::emphasize(text="Security Policy") }}
  
  {{ text::emphasize(text="TLSv1.1_2016") }}
   radio button. and
  press the {{ text::emphasize(text="Create Distribution") }}
  
  button.
</p>
{{ image::boxed(path="blog/aws-s3-cloudfront-static-website-hosting/create-distribution-3.png", width="800px") }}

{{ text::note_block(text='
  Creating a CloudFront distribution can take 15-30 minutes.
')
}}

<h3 id="route-53">Route 53</h3>
<p>
  Route 53 allows us to manage the DNS records for our domain.
</p>
<h4>Create and Alias Record</h4>
<p>
  An {{ text::emphasize(text="alias record") }}
   allows us to point our domain to
  a CloudFront distribution. To create an alias record navigate to:
</p>

{{ text::breadcrumbs(items=[
  "Services",
  "Route 53",
  "Hosted Zones",
  "&lt;hosted-zone&gt;",
  "Create Record Set",
]) }}


<p>
  Select the {{ text::emphasize(text="Type") }}
   as {{ text::emphasize(text="A") }}
  
  from the dropdown and select the {{ text::emphasize(text="Alias: Yes") }}
  
  radio button. In the {{ text::emphasize(text="Alias Target") }}
   select the
  previously created {{ text::emphasize(text="CloudFront") }}
   distribution and
  press the {{ text::emphasize(text="Save Record Set") }}
   button.
</p>
{{ image::boxed(path="blog/aws-s3-cloudfront-static-website-hosting/alias-record-1.png", width="400px") }}

<p>
  Repeat the same process for a {{ text::emphasize(text="AAAA") }}
   record so that
  your site is also reachable over IPv6.
</p>

<h3 id="testing">Testing</h3>
<p>
  Once DNS has propagated you will be able to browse to your website and view all the
  glorious content.
</p>

<h3 id="cost">Cost</h3>
<p>
  Hosting my site on a DigitalOcean droplet was costing me $5 USD a month. The first month
  of hosting on AWS cost $2.54. So almost half the cost for a much better user experience
  and less futzing around with infrastructure. The following is the cost breakdown.
</p>
<ul>
  <li><b>Route 53</b> - $2.51</li>
  <li><b>S3</b> - $0.03</li>
</ul>

<h3 id="outro">Outro</h3>
<p>
  Hosting a static site on AWS is a pretty smooth process once you get your head
  around all the various bits an pieces. The global CDN makes it a nice user
  experience for your users where ever they may be in the world and the tight
  integration of the services makes it relatively painless to setup.
</p>

{% endblock page_content %}