{% extends "_layouts/blog.jinja" %}

{% block page_content %}

<h3 id="intro">Intro</h3>
<p>
  Call me crazy, but I decided to have a look at using
  {{ link::e(
      path="https://neovim.io/", 
        description="NeoVim"
    ) }}
  in this the year of our lord and saviour 2022. NeoVim is a minimal fork of VIM which supports LUA as a scripting engine.
</p>
<p>
  In this post, I will show you how to install and configure NeoVim with some fancy plugins and a smattering of TMUX configs to make it all look nice.
</p>

<h3 id="software">Software</h3>
<p>
  The following software was used in this post.
</p>

<ul>
  <li>NeoVim - 0.7.0</li>
  <li>vim-plug - 0.11.0</li>
  <li>tmux - 3.0a</li>
  <li>Ubuntu - 2004</li>
</ul>

<h3 id="install-neovim">Install NeoVim</h3>
<p>
  Download and install NeoVim.
</p>

{{ text::note_block(text='
<p>
  NeoVim >= 0.6.1 is required for this post.
</p>
') }}

{{ text::code_block(
header="cmd",
language="text",
code='curl -L -O https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.deb
sudo apt install -y ./nvim-linux64.deb'
) }}

<p>
  Clean up
  {{ text::emphasize(text=".deb") }}

  file.
</p>

{{ text::code_block(
header="cmd",
language="text",
code='rm ./nvim-linux64.deb'
) }}

<p>
  Make the required directories and the NeoVim configuration file. The NeoVim configuration file is located at
  {{ text::emphasize(text="~/.config/nvim/init.vim") }}
.
</p>

{{ text::code_block(
header="cmd",
language="text",
code='mkdir -p ~/.config/nvim
touch ~/.config/nvim/init.vim'
) }}

<h3 id="vim-modes">VIM Modes</h3>
<p>
  VIM has two modes: {{ text::emphasize(text="COMMAND") }}
 mode and 
  {{ text::emphasize(text="INSERT") }}
 mode. You start out in 
  {{ text::emphasize(text="COMMAND") }}
 mode. You can press {{ text::kbd(text="i") }}
 
  to enter {{ text::emphasize(text="INSERT") }}
 mode. To return to 
  {{ text::emphasize(text="COMMAND") }}
 mode press {{ text::kbd(text="ESC") }}
.
</p>
<p>
  At this point, if you want to rage quit, you can press 
  {{ text::kbd(text="ESC") }}
 and type {{ text::emphasize(text=":q!") }}
 then press 
  {{ text::kbd(text="ENTER") }}
 to exit VIM without having to burn your computer.
</p>
<p>
  Still with me? Good, let's carry on.
</p>

<h3 id="vim-plug">VIM-Plug</h3>
<p>
  I am using
  {{ link::e(
        path="https://github.com/junegunn/vim-plug", 
        description="vim-plug"
    ) }}
  as the VIM plugin manager.
</p>

{{ text::code_block(
header="cmd",
language="text",
code=`sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'`
) }}

<p>
  Now lets setup vim-plug. Pluggins will be installed in the
  {{ text::emphasize(text="~/.local/share/nvim/plugged") }}
 directory.
</p>

{{ text::code_block(
header="cmd",
language="text",
code='curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \\
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
) }}


<h3 id="neovim-config-file">NeoVim Config File</h3>
<p>
  Initially, lets setup the NeoVim config file to install the plugins with vim-plug. 
  Edit the {{ text::emphasize(text="~/.config/nvim/init.vim") }}
 file 
  and add the follow block of code to the top.
</p>
<p>
  To open a file with NeoVim you use the {{ text::code(text="nvim &lt;filename&gt;") }}
 command.
</p>

{{ text::code_block(
header="~/.config/nvim/init.vim",
language="vim",
code=`call plug#begin('~/.local/share/nvim/plugged')

" https://sharksforarms.dev/posts/neovim-rust/
" Collection of common configurations for the Nvim LSP client
Plug 'neovim/nvim-lspconfig'

" Completion framework
Plug 'hrsh7th/nvim-cmp'

" LSP completion source for nvim-cmp
Plug 'hrsh7th/cmp-nvim-lsp'

" Other usefull completion sources
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-buffer'

" See hrsh7th's other plugins for more completion sources!

" To enable more of the features of rust-analyzer, such as inlay hints and more!
Plug 'simrat39/rust-tools.nvim'

" Snippet engine
Plug 'dcampos/cmp-snippy'
Plug 'dcampos/nvim-snippy'
Plug 'honza/vim-snippets'

" Fuzzy finder
" Optional
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'

" Jinja syntax highlighting
" https://github.com/lepture/vim-jinja
Plug 'lepture/vim-jinja'

" colour schemes
" http://neovimcraft.com/plugin/marko-cerovac/material.nvim/index.html
Plug 'marko-cerovac/material.nvim'

" File explorer
Plug 'kyazdani42/nvim-web-devicons' " for file icons
Plug 'kyazdani42/nvim-tree.lua'

" Format on save
" https://github.com/vim-autoformat/vim-autoformat
Plug 'Chiel92/vim-autoformat'

call plug#end()`
) }}

<p>
  Now, from {{ text::emphasize(text="COMMAND") }}
 mode type
  {{ text::emphasize(text=":w") }}
 and hit {{ text::kbd(text="ENTER") }}
 to 
  save the file.
</p>
<p>
  Now type {{ text::emphasize(text=":PlugInstall") }}
 and hit 
  {{ text::kbd(text="ENTER") }}
 to install the plugins. You should see a screen 
  similar to the below.
</p>

{{ text::code_block(
header="cmd",
language="text",
code=`Updated. Elapsed time: 2.005071 sec.                        │call plug#begin('~/.local/share/nvim/plugged')
[===========]                                               │
                                                            │" Collection of common configurations for the Nvim LSP clie- Finishing ... Done!                                       │nt
- cmp-buffer: remote: Total 13 (delta 0), reused 9 (delta 0)│Plug 'neovim/nvim-lspconfig'
- cmp-path: remote: Total 10 (delta 0), reused 7 (delta 0), │
- rust-tools.nvim: remote: Total 72 (delta 17), reused 36 (d│" Completion framework
- nvim-cmp: Resolving deltas: 100% (170/170), done.         │Plug 'hrsh7th/nvim-cmp'
- vim-vsnip: Resolving deltas: 100% (92/92), done.          │
- nvim-lspconfig: Resolving deltas: 100% (128/128), done.   │" LSP completion source for nvim-cmp
- plenary.nvim: Resolving deltas: 100% (155/155), done.     │Plug 'hrsh7th/cmp-nvim-lsp'
- cmp-vsnip: remote: Total 10 (delta 0), reused 8 (delta 0),│
- telescope.nvim: Resolving deltas: 100% (555/555), done.   │" Snippet completion source for nvim-cmp
- cmp-nvim-lsp: remote: Total 11 (delta 0), reused 8 (delta │Plug 'hrsh7th/cmp-vsnip'
- popup.nvim: remote: Total 16 (delta 1), reused 12 (delta 1│
~                                                           │" Other usefull completion sources
~                                                           │Plug 'hrsh7th/cmp-path'
~                                                           │Plug 'hrsh7th/cmp-buffer'
~                                                           │
~                                                           │" See hrsh7th's other plugins for more completion sources!
~                                                           │
~                                                           │" To enable more of the features of rust-analyzer, such as inlay hints and more!
~                                                           │Plug 'simrat39/rust-tools.nvim'
~                                                           │
~                                                           │" Snippet engine
~                                                           │Plug 'hrsh7th/vim-vsnip'
~                                                           │
[Plugins]                                 1,1            All .config/nvim/init.vim                    1,1            Top`
) }}

<p>
  Type {{ text::emphasize(text=":q!") }}
 to close this window.
  At this point, NeoVim and vim-plug are installed. It's time to configure them.
</p>

<h3 id="material-theme">Material Theme</h3>
<p>
  I like the material theme and I am using the deep ocean colour scheme.
  Add the following LUA snippet below the {{ text::emphasize(text="call plug#end()") }}

  statement.
</p>

{{ text::code_block(
header="~/.config/nvim/init.vim",
language="vim",
code=`"Add config below the 'call plug#end()' statement

" http://neovimcraft.com/plugin/marko-cerovac/material.nvim/index.html
lua &lt;&lt;EOF
-- Set the theme style
vim.g.material_style = 'deep ocean'

require('material').setup({
contrast = {
  sidebars = true,
  cursor_line = true,
  },
italics = {
  comments = true,
  functions = true,
  },
contrast_filetypes = {
  "terminal",
  "packer",
  "qf",
  },
disable = {
  borders = true,
  eob_lines = true
  },
lualine_style = 'stealth'
})

-- Enable the colorscheme
vim.cmd 'colorscheme material'
EOF`
) }}


<h3 id="file-explorer">File Explorer</h3>
<p>
  The next plugin gives us a file explorer.
</p>

{{ text::code_block(
header="~/.config/nvim/init.vim",
language="vim",
code=`lua &lt;&lt;EOF
-- setup with all defaults
-- each of these are documented in ':help nvim-tree.OPTION_NAME'
vim.opt.splitright = true

require'nvim-tree'.setup { -- BEGIN_DEFAULT_OPTS
auto_close = false,
auto_reload_on_write = true,
disable_netrw = false,
hide_root_folder = false,
hijack_cursor = false,
hijack_netrw = true,
hijack_unnamed_buffer_when_opening = false,
ignore_buffer_on_setup = false,
open_on_setup = false,
open_on_tab = false,
sort_by = "name",
update_cwd = false,
view = {
  width = 30,
  height = 30,
  side = "right",
  preserve_window_proportions = true,
  number = false,
  relativenumber = false,
  signcolumn = "yes",
  mappings = {
    custom_only = false,
    list = {
      -- user mappings go here
      },
    },
  },
hijack_directories = {
  enable = true,
  auto_open = true,
  },
update_focused_file = {
  enable = false,
  update_cwd = false,
  ignore_list = {},
  },
ignore_ft_on_setup = {},
system_open = {
  cmd = nil,
  args = {},
  },
diagnostics = {
  enable = true,
  show_on_dirs = false,
  icons = {
    hint = "",
    info = "",
    warning = "",
    error = "",
    },
  },
filters = {
  dotfiles = false,
  custom = {},
  exclude = {},
  },
git = {
  enable = true,
  ignore = true,
  timeout = 400,
  },
actions = {
  change_dir = {
    enable = true,
    global = false,
    },
  open_file = {
    quit_on_open = false,
    resize_window = true,
    window_picker = {
      enable = true,
      chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",
      exclude = {
        filetype = { "notify", "packer", "qf", "diff", "fugitive", "fugitiveblame" },
        buftype = { "nofile", "terminal", "help" },
        },
      },
    },
  },
trash = {
  cmd = "trash",
  require_confirm = true,
  },
log = {
  enable = false,
  truncate = false,
  types = {
    all = false,
    config = false,
    git = false,
    },
  },
}
-- END_DEFAULT_OPTS
EOF`
) }}

<h3 id="code-snippets">Code Snippets</h3>
<p>
  Now for some code snippet goodness. Who doesn't love a bit of 
  auto-completion.
</p>

{{ text::code_block(
header="~/.config/nvim/init.vim",
language="vim",
code="
lua &lt;&lt;EOF
require('snippy').setup({
    mappings = {
        is = {
            ['<Tab>'] = 'expand_or_advance',
            ['<S-Tab>'] = 'previous',
        },
        nx = {
            ['<leader>x'] = 'cut_text',
        },
    },
})
EOF"
) }}

<h3 id="rust-related">Rust Related</h3>
<p>
  I got a lot of the configuration and hints for this post from
      {{ link::e(
      path="https://sharksforarms.dev/posts/neovim-rust/", 
        description="this"
    ) }}  
  wonderful blog post.
  The code below comes from that post and relates to Rust integration.
</p>

{{ text::code_block(
header="~/.config/nvim/init.vim",
language="vim",
code=`
" https://sharksforarms.dev/posts/neovim-rust/
" Set completeopt to have a better completion experience
" :help completeopt
" menuone: popup even when there's only one match
" noinsert: Do not insert text until a selection is made
" noselect: Do not select, force user to select one from the menu
set completeopt=menuone,noinsert,noselect

" Avoid showing extra messages when using completion
set shortmess+=c

" Configure LSP through rust-tools.nvim plugin.
" rust-tools will configure and enable certain LSP features for us.
" See https://github.com/simrat39/rust-tools.nvim#configuration
lua &lt;&lt;EOF
local nvim_lsp = require'lspconfig'

local opts = {
  tools = { -- rust-tools options
  autoSetHints = true,
  hover_with_actions = true,
  inlay_hints = {
    show_parameter_hints = false,
    parameter_hints_prefix = "",
    other_hints_prefix = "",
    },
  },

-- all the opts to send to nvim-lspconfig
-- these override the defaults set by rust-tools.nvim
-- see https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#rust_analyzer
server = {
  -- on_attach is a callback called when the language server attachs to the buffer
  -- on_attach = on_attach,
  settings = {
    -- to enable rust-analyzer settings visit:
    -- https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/generated_config.adoc
    ["rust-analyzer"] = {
      -- enable clippy on save
      checkOnSave = {
        command = "clippy"
        },
      }
    }
  },
}

require('rust-tools').setup(opts)
EOF`
) }}

<p>
  Additionally, the following is also required to compete the integration.
</p>

<p>
  Rust needs to be installed, if you don't have that already, best to get that
  out of the way.
</p>

{{ text::code_block(
header="cmd",
language="text",
code="curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh"
) }}

<p>
  Confirm {{ text::emphasize(text="Rust") }}
 and 
  {{ text::emphasize(text="Cargo") }}
 are installed.
</p>
{{ text::code_block(
header="cmd",
language="text",
code="which rustc
which cargo"
) }}

<p>
  Add {{ text::emphasize(text="rustfmt") }}
 and 
  {{ text::emphasize(text="clippy") }}
 for formatting and code style linting.
</p>
{{ text::code_block(
header="cmd",
language="text",
code="rustup component add rustfmt
rustup component add clippy"
) }}

<p>
  Install {{ text::emphasize(text="rust-analyzer") }}
.
</p>
{{ text::code_block(
header="cmd",
language="text",
code="curl -L https://github.com/rust-analyzer/rust-analyzer/releases/latest/download/rust-analyzer-x86_64-unknown-linux-gnu.gz | gunzip -c - > ~/.cargo/bin/rust-analyzer"
) }}

<p>
  Make {{ text::emphasize(text="rust-analyzer") }}
 executable.
</p>
{{ text::code_block(
header="cmd",
language="text",
code="chmod +x ~/.cargo/bin/rust-analyzer"
) }}

{{ text::note_block(text='
<p>
  $1
 must be installed in a location 
  in your $2
. A reload of your shell may be 
  required.
</p>
') 
  | replace(from="$1", to=text::emphasize(text="rust-analyzer"))
  | replace(from="$2", to=text::emphasize(text="$PATH"))
}}

<h3 id="tmux">TMUX</h3>
<p>
  Finally, I am using TMUX so, I also had to add some settings to make it looks nice 
  with the Material theme.
</p>

<p>
{{ text::code_block(
header="~/.tmux.conf",
language="text",
code=`https://jdhao.github.io/2018/10/19/tmux_nvim_true_color/
set -g default-terminal "screen-256color"
# tell Tmux that outside terminal supports true color
set -ga terminal-overrides ",xterm-256color*:Tc"

# https://cassidy.codes/blog/2019-08-03-tmux-colour-theme/
# https://unix.stackexchange.com/questions/60968/tmux-bottom-bar-color-change
set -g status-style "bg=#282a36"`
) }}

<h3 id="end-result">End Result</h3>
<p>
  I am pretty happy with the result. You can open a directory by using 
  {{ text::code(text="nvim .") }}
 in the directory.
</p>

<p>
  So, how's it look? Pretty dope 😎
</p>
{{ image::boxed(path="blog/neovim-install-and-configure/neovim.png", width="950px") }}

<h3 id="outro">Outro</h3>
<p>
  This was a much longer post than I thought it was initially going to be. 
  In this post, we installed and configured NeoVim with vim-plug to manage 
  pluggins. We also setup Rust integration with a sprinkling of TMUX dust.
  Worth it? Only you can be the judge.
</p>
{% endblock page_content %}