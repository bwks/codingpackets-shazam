{% extends "_layouts/blog.jinja" %}

{% block page_content %}

<h3 id="intro">Intro</h3>
<p>
  Hashes in Crystal are a collection of key/value 
  pairs of defined types.
</p>

<h3 id="creating-a-hash">Creating a hash</h3>

{{ text::code_block(
  header="crystal",
  language="crystal",
  code='# Create a hash with strings for keys and values.
stuff_and_things = {
    "stuff" => "stuff",
    "things" => "things",
}

# Deduce the type signature of a hash. 
typeof(stuff_and_things) # => Hash(String, String)

# To create an empty hash, you must define 
# the intended type of its key/value pairs.
# There are 2 ways to define an empty hash.
stuff_and_things = {} of String => String
stuff_and_things = Hash(String, String).new'
) }}

<h3 id="iterating-a-hash">Iterating a Hash</h3>

{{ text::code_block(
  header="crystal",
  language="crystal",
  code='# Iterate through a hash
stuff_and_things.each do |key, value|
  puts "#{key} #{value}"
end'
) }}

<h3 id="accessing-elements">Accessing Elements</h3>

{{ text::code_block(
  header="crystal",
  language="crystal",
  code='# Get a value via the key name
stuff_and_things["stuff"]

# There are 2 ways to check if a key exists
stuff_and_things["stuff"]? # => value or nil
stuff_and_things.has_key?("stuff") # => true or false

# Check if a value exists
stuff_and_things.has_value?("stuff") # => true or false'
) }}


<h3 id="hash-operations">Hash Operations</h3>

{{ text::code_block(
  header="crystal",
  language="crystal",
  code='# Add key/value pair to a hash
stuff_and_things["blah"] = "blah"

# Change the value of the "blah" key
stuff_and_things["blah"] = "blahblah"

# Delete the "stuff" key
stuff_and_things.delete("stuff")

# Get the size of a hash
stuff_and_things.size # => 3'
) }}


<h3 id="considerations">Considerations</h3>
<ul>
  <li>Keys are unique within a hash.</li>
  <li>Elements maintain their insertion order.</li>
  <li>Attempting to access a key of a hash that does not exist is a runtime error.</li>
</ul>
{% endblock page_content %}