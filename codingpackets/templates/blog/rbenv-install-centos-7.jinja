{% extends "_layouts/blog.jinja" %}

{% block page_content %}
<h3 id="intro">Intro</h3>
<p>
  {{ link::e(path="https://github.com/rbenv/rbenv", description="rbenv") }}
 is a utility for installing multiple ruby
  versions on a host machine. Using rbenv allows you to install ruby in a path you have ownership
  over so you can install gems without having to have sudo or root privileges. rbenv also allows
  you to target the exact ruby version in development that's in use in production deployments
  potentially avoiding nefarious bugs due to Ruby version mismatches.
</p>
<p>
  In this post I will install rbenv on CentOS, install an alternate Ruby version to the
  system Ruby and cover some basic usage.
</p>

<p>
  For reference the following software will be used in this post.
</p>
<ul>
  <li><b>CentOS</b> - 7</li>
  <li><b>rbenv</b> - 1.1.1-40-g483e7f9</li>
  <li><b>ruby</b> - 2.5.5</li>
</ul>

<h3 id="dependencies">Dependencies</h3>
<p>
  Install the required dependencies.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`sudo yum install -y git-core zlib zlib-devel gcc-c++ patch readline readline-devel libyaml-devel libffi-devel openssl-devel make bzip2 autoconf automake libtool bison curl`
) }}


<h3 id="install-rbenv">Install rbenv</h3>
<p>
  Clone the rbenv git repository.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`git clone https://github.com/rbenv/rbenv.git ~/.rbenv

# output

Cloning into '/home/bradmin/.rbenv'...
remote: Enumerating objects: 4, done.
remote: Counting objects: 100% (4/4), done.
remote: Compressing objects: 100% (4/4), done.
remote: Total 2748 (delta 0), reused 1 (delta 0), pack-reused 2744
Receiving objects: 100% (2748/2748), 517.92 KiB | 344.00 KiB/s, done.
Resolving deltas: 100% (1720/1720), done.`
) }}


<p>
  Compile dynamic bash extension to speed up rbenv.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code="cd ~/.rbenv && src/configure && make -C src

# output

make: Entering directory `/home/bradmin/.rbenv/src'
gcc -fPIC     -c -o realpath.o realpath.c
gcc -shared -Wl,-soname,../libexec/rbenv-realpath.dylib  -o ../libexec/rbenv-realpath.dylib realpath.o
make: Leaving directory `/home/bradmin/.rbenv/src'"
) }}


<p>
  Update the {{ text::emphasize(text="~/.bashrc") }}
 to add the {{ text::code(text="rbenv") }}
 cli
  utility to your path.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
echo 'eval "$(rbenv init -)"' >> ~/.bashrc`
) }}


<p>
  Reload your shell to load the {{ text::emphasize(text="rbenv") }}
 parameters into the
  environment.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`exec $SHELL -l`
) }}


<h3 id="install-plugins">Install Plugins</h3>
<p>
  Install the {{ link::e(path="https://github.com/rbenv/ruby-build", description="ruby-build") }}
 plugin.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`mkdir -p "$(rbenv root)"/plugins
git clone https://github.com/rbenv/ruby-build.git "$(rbenv root)"/plugins/ruby-build

# output

Cloning into '/home/bradmin/.rbenv/plugins/ruby-build'...
remote: Enumerating objects: 35, done.
remote: Counting objects: 100% (35/35), done.
remote: Compressing objects: 100% (20/20), done.
remote: Total 9681 (delta 12), reused 33 (delta 10), pack-reused 9646
Receiving objects: 100% (9681/9681), 2.05 MiB | 1.18 MiB/s, done.
Resolving deltas: 100% (6327/6327), done.`
) }}


<h3 id="install-ruby">Install Ruby</h3>
<p>
  Install an alternate version of Ruby with the {{ text::code(text="rbenv install &lt;ruby-version&gt;") }}

  command.
</p>

{{ text::code_block(
  header="cmd",
  language="text",
  code=`rbenv install 2.5.5

# output

Downloading ruby-2.5.5.tar.bz2...
-> https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.5.tar.bz2
Installing ruby-2.5.5...
Installed ruby-2.5.5 to /home/bradmin/.rbenv/versions/2.5.5`
) }}


<p>
  After installing new version of Ruby or a gem that provides new commands, use the
  {{ text::code(text="rbenv rehash") }}
 command to install shims for all executables known to rbenv.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`rbenv rehash`
) }}


<h3 id="usage">Usage</h3>
<p>
  Create a project folder and set a default ruby version with the
  {{ text::code(text="rbenv local &lt;ruby-version&gt;") }}
 command.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`mkdir ~/ruby-project && cd ~/ruby-project
rbenv local 2.5.5`
) }}



{{ text::note_block(text='
    This will create a $1
 file in the project
    directory overriding the global Ruby version.
') 
 | replace(from="$1", to=text::emphasize(text=".ruby-version"))
}}

<p>
  Confirm the Ruby version installed and location of the Ruby binary is in the users home
  directory.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`ruby --version

# output

ruby 2.5.5p157 (2019-03-15 revision 67260) [x86_64-linux]`
) }}


{{ text::code_block(
  header="cmd",
  language="text",
  code=`which ruby

# output

~/.rbenv/shims/ruby`
) }}


{{ text::code_block(
  header="cmd",
  language="text",
  code=`which gem

# output

~/.rbenv/shims/gem`
) }}



<p>
  Confirm gems can be successfully installed as a non root user.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code=`gem install bundler

# output

Fetching: bundler-2.0.1.gem (100%)
Successfully installed bundler-2.0.1
Parsing documentation for bundler-2.0.1
Installing ri documentation for bundler-2.0.1
Done installing documentation for bundler after 3 seconds
1 gem installed`
) }}


{{ text::code_block(
  header="cmd",
  language="text",
  code=`which bundle

# output

~/.rbenv/shims/bundle`
) }}


<h3 id="outro">Outro</h3>
<p>
  rbenv is a useful utility to managing multiple Ruby installs on a host machine. This allows
  you to keep your system Ruby install clean and also use the same Ruby version in your
  development environment as you would use in a production deployment.
</p>

{% endblock page_content %}