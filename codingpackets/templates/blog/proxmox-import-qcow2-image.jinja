{% extends "_layouts/blog.jinja" %}

{% block page_content %}

<h3 id="intro">Intro</h3>
<p>
  I recently migrated my homelab servers 
  from running bare metal KVM/QEMU on Ubuntu, 
  to running Proxmox as a hypervisor. As part of 
  that process I migrated some of the VM's from 
  KVM to Proxmox. In this post I will show you how 
  I imported the 
  {{ text::emphasize(text="qcow2") }}
 VM's 
  from KVM/QEMU into Proxmox.
</p>
<p>
  The following software was used in this post.
</p>
<ul>
  <li><b>Proxmox</b> - 7.0-11</li>
  <li><b>Ubuntu</b> - 18.04</li>
</ul>

<h3 id="kvm-qemu-host">KVM/QEMU Host</h3>
<p>
  Start by finding the ID of the VM you want 
  to migrate.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code='virsh list --all

# Output
 Id    Name                           State
----------------------------------------------------
 2     uctl01                         running'
) }}

<p>
  Shutdown the target VM.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code='virsh shutdown 2

# Output
 Id    Name                           State
----------------------------------------------------
       uctl01                         shut off'
) }}


<p>
  Copy the {{ text::emphasize(text="qcow2") }}
 
  image to the Proxmox host. I used SCP in the 
  below example.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code='scp /opt/libvirt/vm/uctl01.qcow2 root@&lt;target-ip&gt;:/tmp/uctl01.qcow2'
) }}
<p>
  That's everything that is required on the KVM/QEMU host.
</p>

<h3 id="proxmox-host">Proxmox Host</h3>
<p>
  On the Proxmox host, create a new VM that will be 
  used to attach the 
  {{ text::emphasize(text="qcow2") }}
 disk that 
  was copied over. Ensure that you use a unique VM ID:
  {{ text::emphasize(text="101") }}
 in the below
  example.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code='qm create 101 \
  --name uctl01 --numa 0 --ostype l26 \
  --cpu cputype=host --cores 2 --sockets 1 \
  --memory 4096  \
  --scsihw virtio-scsi-pci \
  --net0 bridge=vmbr0,virtio=BE:66:BD:74:E8:C9,firewall=1 \
  --serial0 socket'
) }}

<p>
  Confirm the VM was created successfully.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code='qm list 

# Output
VMID NAME                 STATUS     MEM(MB)    BOOTDISK(GB) PID
 101 uctl01               stopped    4096               0.00 0'
) }}

<p>
  Import the {{ text::emphasize(text="qcow2") }}
 
  disk to the required datastore.
  {{ text::emphasize(text="local-lvm") }}
 in my case.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code="qm importdisk 101 /tmp/uctl01.qcow2 local-lvm

# Output
Successfully imported disk as 'unused0:local-lvm:vm-101-disk-0"
) }}

<p>
  Attach the disk to the VM created in the previous 
  step.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code='qm set 101 --scsi0 local-lvm:vm-101-disk-0

# Output
update VM 101: -scsi0 local-lvm:vm-101-disk-0'
) }}

<p>
  Make the disk bootable, otherwise the VM will 
  not boot.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code='qm set 101 --boot c --bootdisk scsi0

# Output
update VM 101: -boot c -bootdisk scsi0'
) }}

<p>
  Thats all the steps required to import the 
  VM into the Proxmox host. But we are not finished 
  yet, the VM had no network connectivity ðŸ˜­.
</p>

<h3 id="virtual-machine">Virtual Machine</h3>
<p>
  When I built the VM on the KVM host, the 
  network interface was named 
  {{ text::emphasize(text="ens3") }}
. 
  When I imported it into Proxmox, the interface 
  named changed to 
  {{ text::emphasize(text="ens18") }}
. The 
  interface name needs to be updated in 
  {{ text::emphasize(text="netplan") }}
.
</p>
<p>
  Logon to the console of the VM to update the 
  network interface numbering.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code='qm terminal 101

# Output
starting serial terminal on interface serial0 (press Ctrl+O to exit)

# Login with username/password'
) }}

<p>
  Confirm the network interface numbering.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code='ip addr

# Output
2: ens18: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
...'
) }}

<p>
  Update the 
  {{ text::emphasize(text="/etc/netplan/01-netcfg.yaml") }}

  config file.
</p>
{{ text::code_block(
  header="file",
  language="yaml",
  code='# /etc/netplan/01-netcfg.yaml
network:
  version: 2
  ethernets:
    # ens3: <- Change to current interface name
    ens18:
      dhcp4: no
      dhcp6: no
      addresses: [&lt;ip-address&gt;/&lt;prefix-length&gt;]
      gateway4: &lt;gateway-ip-address&gt;
      nameservers:
        addresses: [&lt;nameserver-ip-address&gt;]'
) }}

<p>
  Apply the {{ text::emphasize(text="netplan") }}

  config.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code='sudo netplan apply'
) }}

<p>
  And that's it, the VM should now have network connectivity.
</p>

<h3 id="outro">Outro</h3>
<p>
  In this post, I showed you how to import a QCOW2 VM from 
  a KVM/QEMU host to a Proxmox host and update the network 
  settings on the VM to fix network connectivity.
</p>

{% endblock page_content %}