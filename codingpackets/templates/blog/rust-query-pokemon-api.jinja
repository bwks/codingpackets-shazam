{% extends "_layouts/blog.jinja" %}

{% block page_content %}

<h3 id="intro">Intro</h3>
<p>
  This year I have been learning Rust, and I recently came across 
  an excellent 
  {{ link::e(
    path="https://blog.itsalwaysthe.network/posts/comparing-go-and-python-part-2/", 
    description="post"
) }}
  by Tyler Christiansen
  {{ link::e(
    path="https://twitter.com/supertylerc", 
    description="(@supertylerc)"
) }} who BTW, looks EXACTLY like Captain Jean-Luc Picard, 
  comparing Python and Go. It's an excellent post (the second in the series) and well 
  worth a read. I am on a similar journey from Python to Rust, so I decided to emulate 
  the Go part of the blog post in Rust as a bit of a fun exersize on Easter Monday üêá. 
</p>
<p>
  In this post, I will show you how to connect to the Pokemon API asynchronously 
  to gather information on the first 150 Pokemon. Unlike in Tylers post, I will 
  not be covering Python or a synchronous version of the Rust code.
</p>

<h3 id="software">Software</h3>
<p>
  The following software was used in this post.
</p>
<ul>
  <li>Rust - 1.59.0</li>
  <li>reqwest - 0.11</li>
  <li>tokio - 1.12.0</li>
  <li>futures - 0.3.21</li>
  <li>serde - 1.0.136</li>
  <li>serde_derive - 1.0.136</li>
  <li>serde_json - 1.0.79</li>
</ul>

<h3 id="new-project">New Project</h3>
<p>
  Use {{ text::code(text="cargo") }}
 to generate a new project.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code='cargo new pokemon'
) }}

<h3 id="dependencies">Dependencies</h3>
<p>
  Add the following libraries to the dependencies section of 
  the {{ text::emphasize(text="cargo.toml") }}
 file. 
</p>
{{ text::code_block(
  header="Cargo.toml",
  language="ini",
  code='[dependencies]
reqwest = { version = "0.11", features = ["json"] }
tokio = { version = "1.12.0", features = ["full"] }
futures = "0.3.21"
serde = "1.0.136"
serde_derive = "1.0.136"
serde_json = "1.0.79"'
) }}

<h3 id="lets-get-rusty">Lets Get Rusty ü¶Ä</h3>
<p>
  I have placed comments in the following code block to try and 
  explain what is going on and how it works. Admittedly, for some 
  of the async code, I barely understand how it works myself.
</p>
{{ text::code_block(
  header="main.rs",
  language="rust",
  code=`use futures::StreamExt;
use reqwest::{Client, Error};
use serde_derive::Deserialize;
use std::time::{Duration, Instant};

// The number of concurrent requests to execute.
const BUFFER_SIZE: usize = 50;

// Struct to hold the Pokemon data.
// The 'Deserialize' macro adds the 'Deserialize' trait to the struct.
#[derive(Deserialize)]
struct Pokemon {
    // For the purpose of this exersize I am just capturing 
    // the 'id' and 'name' fields, all other fields will be ignored.
    id: u32,
    name: String,
}

// The '#[tokio::main]' annotation sets the 'main' function up for 
// asynchronous execution. 
#[tokio::main]
async fn main() {
    // Start a timer
    let start = Instant::now();

    // Create a 'reqwest client' using the builder pattern.
    // This allows you to set things like the timeout, headers etc..
    let client = Client::builder()
        // Set the timeout value to 2 seconds.
        .timeout(Duration::from_secs(2))
        // Build the client.
        .build()
        // If there are any errors, bail with the message 'got an error building client'
        .expect("got an error building client");

    // Create a vector of URLs to query consisting of the first 150 Pokemon.
    let urls = (1..=150).map(|x| format!("https://pokeapi.co/api/v2/pokemon/{}", x));

    // Here we get ready to asynchronously connect to the Pokemon API.
    // We start by creating a iterable 'stream' of 'futures' out of the 'urls' vector.
    let data: Vec&lt;Result&lt;String, Error&gt;&gt; = futures::stream::iter(urls)
        // 'StreamExt::map()' performs an action on each iteration of the 'stream'
        // and converts it to a new type.
        .map(|url| {
            // Create a new 'client' object from the original '&client' reference
            // that is enclosed in this scope.
            let client = &client;
            // Start an async block moving ownership of any captured varibales
            // into the block.
            async move {
                // Send a 'get' request to the 'url' and 'await' the response.
                let resp = client.get(url).send().await?;
                // Return the 'response text' as the 'String' portion of the
                // 'Result&lt;String, Error&gt;' type.
                resp.text().await
            }
        })
        // Kick of the requests asynchronously in batches equal to 'BUFFER_SIZE'.
        .buffer_unordered(BUFFER_SIZE)
        // Collect all the responses and add them to the 'data' vector.
        .collect()
        // Wait for all requests to finish.
        .await;

    // Due to the asynchronous nature of the API calls, the responses are returned out of order.
    // I want to print the Pokemon out in the order of their ID's lowest to highest.
    //
    // To do this, let's unpack the 'data: Vec&lt;Result&lt;String, Error&gt;&gt;' vector so we can deserialize
    // the 'response text' into our 'Pokemon' struct.
    //
    // The 'pokemons: Vec&lt;Pokemon&gt;' vector needs to be mutable so we can sort it later.
    let mut pokemons: Vec&lt;Pokemon&gt; = data
        .iter()
        .map(|d| match d {
            Ok(v) =&gt; {
                // Unpack the 'Result&lt;String, Error&gt;' and deserialize the text into a Pokemon struct.
                // If there is an error, bail with the error message 'broken pokemon'
                let pokemon: Pokemon = serde_json::from_str(v).expect("broken pokemon");
                // Return the pokemon object
                pokemon
            }
            // If any errors exist in 'Result&lt;String, Error&gt;', bail with the error message 'broken pokemon'
            Err(_) =&gt; panic!("pokemon broken"),
        })
        // Collect all the Pokemon objects into the 'pokemons' vector.
        .collect();

    // Sort the pokemons vector by their id. We made 'pokemons' mutable 
    // so it can be sorted in place.
    pokemons.sort_by_key(|p| p.id);

    // Iterate over the 'pokemons' vector to print the 'id' and 'name'.
    for p in pokemons {
        println!("{}: {}", p.id, p.name)
    }

    // Stop the timer
    let duration = start.elapsed();
    // Debug printing here ({:?}) to print out 'duration' for simplicity.
    println!("Time elapsed: {:?}", duration);
}`
) }}
<p>
  I hope you got all that. You still with me? Clear as mud? Good! Let's continue.
</p>
<p>
  Now, use {{ text::code(text="cargo") }}
 to build a binary that is optimized for release
  with the {{ text::emphasize(text="--relase") }}
 flag.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code='cargo build --release'
) }}

<p>
  The binary {{ text::emphasize(text="pokemon") }}
 will be generated 
  in the {{ text::emphasize(text="target/release") }}
 directory.
</p>

<h3 id="gotta-catch-em-all">Gotta Catch Em All</h3>
<p>
  Alright, the moment of truth. Let's hit them so hard and fast they think their surrounded.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code='target/release/./pokemon

# Output
1: bulbasaur
2: ivysaur
.
. &lt;output omitted&gt;
.
149: dragonite
150: mewtwo
Time elapsed: 425.068076ms'
) }}

<p>
  Holy crab apples Batman, that was fast {{ text::emphasize(text="‚ö° 425.068076ms ‚ö°") }}
 
</p>
<p>
  &lt1 second is pretty darn good and the result is very close with the async Go version from Tylers post. 
</p>

<p>
  The results for all 
  {{ text::emphasize(text="898") }}
 
  Pokemon are around the 
  {{ text::emphasize(text="1.5 - 2") }}
 
  second mark. I updated the code to query the API in batches of 
  {{ text::emphasize(text="50") }}
 
  which seemed like a good sweet spot without overloading the API server.
</p>
{{ text::code_block(
  header="cmd",
  language="text",
  code='target/release/./pokemon

# Output
1: bulbasaur
2: ivysaur
.
. &lt;output omitted&gt;
.
897: spectrier
898: calyrex
Time elapsed: 1.630966447s'
) }}

<h3 id="outro">Outro</h3>
<p>
  In this post, I showed you how to connect to the Pokemon API asynchronously 
  to gather information on the lovable Pokemon. 
  This was a super fun exercise that allowed me to learned a lot about the 
  Rust async model. Thanks again to 
    {{ link::e(
    path="https://twitter.com/supertylerc", 
    description="@supertylerc"
) }} for the inspiration. Peace out legends ‚úåÔ∏è
</p>

{% endblock page_content %}